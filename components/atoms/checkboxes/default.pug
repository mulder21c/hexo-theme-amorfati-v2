//- @pugdoc
  name: checkbox
  description: create input checkbox element
  beforeEach: |
    include ../../utils/util
  arguments:
    - {object} props
    - {string} [props.name] - the value of checkbox's name attribute
    - {string} [props.id] - the value of checkbox's id attribute and label's for attribute <br> If not specified, an auto-generated id is assigned.
    - {string} [props.label] - label of checkbox <br> If do not specify this value, you must author and style label element as child element.
    - {boolean} [props.checked] - the checked state of checkbox
    - {string} [props.value] - the value of checkbox
    - {string} [props.labelPosition] ['right']  - Where the label is located relative to the visual indicator<br>One of `'top'`, `'left'`, `'right'`, `'bottom'`
    - {string} [props.labelClassName] - the class name for label element
  examples:
    - |
      +checkbox({label: 'agree', checked: true})
      +checkbox({ checked: false, id: "no-label"})
        label(for="no-label") checkbox
mixin checkbox(props)
  -
    // verifying props
    const chkProps = {
      label: PropTypes.string,
      checked: PropTypes.bool,
      id: PropTypes.string,
      value: PropTypes.string,
      labelPosition: PropTypes.oneOf([
        `top`,
        `left`,
        `right`,
        `bottom`,
      ]),
      labelClassName: PropTypes.string,
    };
    const chkValidate = validateProps(chkProps);
    const defaults = {labelPosition: `right`, labelClassName: null};
    const {
      checked,
      label,
      id,
      labelPosition,
      value,
      labelClassName: lblClassName,
      class: cn,
      ...attrs
    } = {
      ...defaults,
      ...props,
    };
    chkValidate({
      label,
      checked,
      id,
      value,
      labelPosition,
      labelClassName: lblClassName
    });

    const {prefix} = theme;
    const uid = id || generateUid();
    const isReverse = [`left`, `top`].includes(labelPosition);
    const isColumn = [`top`, `bottom`].includes(labelPosition);
    const labelClassName = [
      `${prefix}-checkbox__label`,
      { [`${prefix}-checkbox__label--reverse`]: isReverse },
      { [`${prefix}-checkbox__label--column`]: isColumn },
      ...(Array.isArray(lblClassName) ? lblClassName : [lblClassName] ),
    ];
  span(class=[`${prefix}-checkbox`, ...(Array.isArray(cn) ? cn : [cn])])
    input(
      type="checkbox"
      id=uid
      value=value
      checked=checked
      class=`${prefix}-checkbox__control`
    )&attributes(attrs)
    if (label)
      label(for=uid class=labelClassName)= label
    else
      span(class=labelClassName aria-hidden="true")
      block
