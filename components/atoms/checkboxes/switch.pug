//- @pugdoc
  name: switchButton
  description: create switch button
  beforeEach: |
    include ../../utils/util
  arguments:
    - {object} options
    - {string} [options.name] - the value of switch button's name attribute
    - {string} [options.id] - the value of switch button's id attribute and label's for attribute <br> If not specified, an auto-generated id is assigned.
    - {string} [options.label] - label of switch button <br> If do not specify this value, you must author and style label element.
    - {boolean} [options.checked] - the state of switch button
    - {string} [options.value] - the value of switch button
    - {string} [options.labelPosition] ['right']  - Where the label is located relative to the visual indicator<br>One of `'left'`, `'right'`
  examples:
    - |
      +switchButton({label: '알림', checked: true})
mixin switchButton(options)
  -
    const switchBtnProps = {
      label: PropTypes.string,
      checked: PropTypes.bool,
      id: PropTypes.string,
      value: PropTypes.string,
      labelPosition: PropTypes.oneOf([
        `left`,
        `right`,
      ]),
    };
    const switchBtnValidate = validateProps(switchBtnProps);
    const defaults = {labelPosition: `right`};
    const { checked, label, id, labelPosition, value, ...attrs } = {
      ...defaults,
      ...options,
    };
    const {prefix} = theme;
    const uid = id || generateUid();
    const isReverse = [`left`].includes(labelPosition);
    switchBtnValidate({label, checked, id, value, labelPosition});
    const btnClassName = [
      `${prefix}-switch__btn`,
      { [`${prefix}-switch__btn--reverse`]: isReverse }
    ];
  span(class=`${prefix}-switch`)
    input(
      type="checkbox"
      id=uid
      value=value
      checked=checked
      class=`${prefix}-switch__control`
    )&attributes(attrs)
    span(class=btnClassName)
    if (label)
      label(for=uid class=`${prefix}-switch__label`) label
