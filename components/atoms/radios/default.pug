//- @pugdoc
  name: radio
  description: create input radio element
  beforeEach: |
    include ../../utils/util
  arguments:
    - {object} options
    - {string} options.name - name of radio
    - {string|number|boolean} options.value - the value of radio
    - {string} [options.label] - label of radio<br> If do not specify this value, you must author and style label element.
    - {string} [options.id] - the value of radio's id attribute and label's for attribute
    - {boolean} [options.checked] - the checked state of radio
    - {string} [options.labelPosition] ['right']  - Where the label is located relative to the visual indicator<br>One of `'top'`, `'left'`, `'right'`, `'bottom'`
    - {string} [props.labelClassName] - the class name for label element
  examples:
    - |
      +radio({label: 'yes', name: 'answer', value: 1})
mixin radio(options)
  -
    // verifying props
    const radioProps = {
      label: PropTypes.string,
      name: PropTypes.string.isRequired,
      checked: PropTypes.bool,
      id: PropTypes.string,
      value: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number,
        PropTypes.bool,
      ]).isRequired,
      labelPosition: PropTypes.oneOf([
        `top`,
        `left`,
        `right`,
        `bottom`,
      ]),
      labelClassName: PropTypes.string,
    };
    const radioValidate = validateProps(radioProps);
    const defaults = {labelPosition: `right`};
    const {
      checked,
      label,
      id,
      name,
      labelPosition,
      value,
      labelClassName: lblClassName,
      class: cn,
      ...attrs
    } = {
      ...defaults,
      ...options,
    };
    radioValidate({
      label,
      checked,
      id,
      name,
      value,
      labelPosition,
      labelClassName: lblClassName
    });

    const {prefix} = theme;
    const uid = id || generateUid();
    const isReverse = [`left`, `top`].includes(labelPosition);
    const isColumn = [`top`, `bottom`].includes(labelPosition);
    const labelClassName = [
      `${prefix}-radio__label`,
      { [`${prefix}-radio__label--reverse`]: isReverse },
      { [`${prefix}-radio__label--column`]: isColumn },
      ...(Array.isArray(lblClassName) ? lblClassName : [lblClassName] ),
    ];
  span(class=[`${prefix}-radio`, ...(Array.isArray(cn) ? cn : [cn])])
    input(
      type="radio"
      id=uid
      name=name
      value=value
      checked=checked
      class=`${prefix}-radio__control`
    )&attributes(attrs)
    if (label)
      label(for=uid class=labelClassName)= label
    else
      span(class=labelClassName aria-hidden="true")
      block
