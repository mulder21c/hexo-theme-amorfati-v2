//- @pugdoc
  name: radio
  description: create input radio element
  beforeEach: |
    include ../../utils/util
  arguments:
    - {object} options
    - {string} options.label - label of radio
    - {string} options.name - name of radio
    - {string} [options.id] - the value of radio's id attribute and label's for attribute
    - {boolean} [options.checked] - the checked state of radio
    - {string} [options.labelPosition] ['right']  - Where the label is located relative to the visual indicator<br>One of `'top'`, `'left'`, `'right'`, `'bottom'`
  examples:
    - |
      +radio({label: 'yes', name: 'answer',  checked: true})
mixin radio(options)
  -
    const radioProps = {
      label: PropTypes.string.isRequired,
      name: PropTypes.string.isRequired,
      checked: PropTypes.bool,
      id: PropTypes.string,
      labelPosition: PropTypes.oneOf([
        `top`,
        `left`,
        `right`,
        `bottom`,
      ]),
    };
    const radioValidate = validateProps(radioProps);
    const defaults = {labelPosition: `right`};
    const { checked, label, id, name, labelPosition, ...attrs } = {
      ...defaults,
      ...options,
    };
    const {prefix} = theme;
    const className = [
      `${prefix}-radio`,
    ];
    const uid = id || generateUid();
    const isReverse = [`left`, `top`].includes(labelPosition);
    const isColumn = [`top`, `bottom`].includes(labelPosition);
    radioValidate({label, checked, id, name, labelPosition});
    const labelClassName = [
      `${prefix}-radio__label`,
      { [`${prefix}-radio__label--reverse`]: isReverse },
      { [`${prefix}-radio__label--column`]: isColumn }
    ];
  input(
    type="radio"
    id=uid
    name=name
    checked=checked
    class=`${prefix}-radio__control`
  )
  label(for=uid class=labelClassName) label
